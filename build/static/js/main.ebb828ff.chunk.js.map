{"version":3,"sources":["utils/arms/user/state.ts","utils/translations/i18n.ts","components/AvatarCustom/index.tsx","utils/arms/user/reducer.ts","utils/arms/playlists/state.ts","utils/arms/playlists/reducer.ts","utils/arms/playlistContents/state.ts","utils/arms/playlistContents/reducer.ts","app/store.ts","app/hooks.ts","utils/arms/user/selectors.ts","containers/Header/index.tsx","assets/media-player.png","components/Assets/LoginIllustration/index.tsx","utils/api/interface.ts","utils/api/index.ts","pages/LoginScreen/index.tsx","pages/PlaylistContents/hook.tsx","utils/arms/playlistContents/selectors.ts","utils/arms/playlists/selectors.ts","utils/arms/playlists/middleware.ts","containers/Dialog/EditPlaylistDialog/index.tsx","assets/empty-state.png","components/Assets/EmptyIllustration/index.tsx","components/Playlists/ListMode/index.tsx","containers/Dialog/SelectPlaylistDialog/index.tsx","utils/arms/playlistContents/middleware.ts","components/Dialog/ConfirmActionDialog/index.tsx","containers/PlaylistContents/Content/index.tsx","containers/PlaylistContents/Content/Skeleton/index.tsx","pages/PlaylistContents/index.tsx","components/Playlists/MosaicMode/index.tsx","components/Playlists/MosaicMode/Skeleton/index.tsx","pages/Playlists/index.tsx","pages/Playlists/hook.tsx","pages/Profile/index.tsx","containers/Body/index.tsx","containers/App/index.tsx","index.js"],"names":["PlaylistDisplayModeEnum","AvailableLangague","userDefaultData","accessToken","language","EN","email","avatar","firstName","lastName","fullName","isUserLogin","playlistDisplayMode","MOSAIC","resources","en","translation","english","fr","french","i18n","use","LanguageDetector","initReactI18next","init","fallbackLng","supportedLngs","FR","interpolation","escapeValue","AvatarSizeEnum","userSlice","createSlice","name","initialState","reducers","setUserLogin","state","action","payload","googleLoginResponse","setUserLogout","setUserLanguage","setUserPlaylistDisplayMode","actions","playlistsDefaultData","prevPageToken","undefined","currentPageToken","nextPageToken","items","playlistsSlice","addPlaylists","playlistsData","updatePlaylist","forEach","item","id","playlistId","snippet","localized","title","dataToUpdate","description","status","privacyStatus","defaultItemResourceId","kind","videoId","playlistContentsDefaultData","playlistContentsSlice","addPlaylistContents","playListContentsData","removePlaylistContents","removeContent","filter","combinedReducer","combineReducers","user","userReducer","playlistContents","playlistContentsReducer","playlists","playlistsReducer","store","configureStore","reducer","AvatarCustom","source","size","MD","getAvatarSize","paramSize","XXXL","XXL","XL","L","SM","Avatar","alt","src","sx","width","height","useAppDispatch","useDispatch","useAppSelector","useSelector","selectIsUserLogin","selectUserFullName","selectUserAvatar","selectUserLanguage","selectUserAccessToken","selectUserPlaylistDisplayMode","Header","history","useHistory","t","useTranslation","dispatch","userFullName","userAvatar","useState","anchorEl","setAnchorEl","Box","flexGrow","AppBar","className","position","Toolbar","Tooltip","IconButton","edge","color","mr","onClick","push","Typography","variant","component","event","currentTarget","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","disableScrollLock","open","Boolean","onClose","MenuItem","Divider","LoginIllustration","RequestMethodEnum","target","rel","href","mediaPlayer","requestYoutubeApi","method","endPoint","urlParams","bodyParams","apiUrl","datas","str","Object","entries","key","value","decodeURIComponent","toPostData","axios","url","responseType","data","then","response","catch","error","console","log","getYoutubePlaylists","pageToken","playlistIds","part","mine","maxResults","join","GET","updatePlaylistData","PUT","deleteItemFromPlaylist","itemId","DELETE","insertItemToPlaylist","resourceId","POST","getUserInfo","headers","Authorization","requestUserInfoApi","Login","login","useGoogleLogin","prompt","scope","onSuccess","res","a","access_token","loginResponse","picture","given_name","family_name","onError","Button","startIcon","useFetchPlaylistContents","userAccessToken","arePlaylistContentsLoading","setArePlaylistContentsLoading","arePlaylistContentsLoaded","setArePlaylistContentsLoaded","useEffect","getYoutubePlaylistsItems","selectPlaylistContentsNextPageToken","selectPlaylistContentsItems","selectPlaylistsCurrentPageToken","selectPlaylistsNextPageToken","selectPlaylistsItems","selectPlaylistItem","values","updatePlaylistDataAction","EditPlaylistDialog","visible","onCancel","playlistItem","setTitle","setDescription","setStatus","titleError","setTitleError","canSave","setCanSave","isSaving","setIsSaving","snackbarVisible","setSnackbarVisible","snackbarMessage","setSnackbarMessage","snackbarSeverity","setSnackbarSeverity","executeOnCancel","onSave","dataToSave","length","Dialog","fullWidth","maxWidth","DialogTitle","DialogContent","TextField","required","margin","label","type","onChange","select","ListItemText","primary","DialogActions","LoadingButton","loading","disabled","Snackbar","autoHideDuration","Alert","severity","EmptyIllustration","DisplayListModeEnum","emptyState","ListMode","playlistsListData","setCanExecuteAfterSelect","setSelectedPlaylistId","mode","DEFAULT","onClickOnEditPlaylist","onClickOnOpenPlaylist","selectedPlaylist","setSelectedPlaylist","handleChangeSelectedPlaylist","handleListItemSecondaryActionByMode","PlaylistData","handleListItemAvatarByMode","thumbnails","high","SELECTION","handleRadioButtonByMode","Radio","checked","List","map","index","handleClickOnItem","ListItem","secondaryAction","ListItemAvatar","secondary","SelectPlaylistDialog","currentPlaylistId","hideCurrentPlaylist","confirmText","confirmIcon","onConfirm","setPlaylistsListData","isLoading","setIsLoading","isLoaded","setIsLoaded","setNextPageToken","selectedPlaylistId","loadPlaylistsList","useCallback","newItems","deleteItemFromPlaylistAction","insertItemToPlaylistAction","itemResourceId","moveItemToPlaylistAction","Promise","all","ConfirmActionDialog","ItemActionEnum","content","confirmButtonLabel","Content","playlistsListItems","anchorCurrentIemResourceId","setAnchorCurrentIemResourceId","anchorCurrentItemId","setAnchorCurrentItemId","confirmDialogVisible","setConfirmDialogVisible","confirmDialogContent","setConfirmDialogContent","confirmDialogOnConfirm","setConfirmDialogOnConfirm","confirmDialogOnCancel","setConfirmDialogOnCancel","selectPlaylistDialogVisible","setSelectPlaylistDialogVisible","selectPlaylistDialogMode","setSelectPlaylistDialogMode","selectPlaylistDialogTitle","setSelectPlaylistDialogTitle","selectPlaylistDialogConfirm","setSelectPlaylistDialogConfirm","selectPlaylistDialogConfirmIcon","setSelectPlaylistDialogConfirmIcon","resetConfirmDialogStates","executeDeleteClick","resetSelectPlaylistDialogStates","handleCloseMoreMenu","handleSaveSelectDialog","SAVE_IN","MOVE_TO","handleOpenSelectPlaylistDialog","getThumbnailsFromItem","Item","pathOrUrlOfThumbnails","videoOwnerChannelTitle","handleMoreMenu","displaySkeletonContent","isFirstLoad","Array","_","i","ContentSkeleton","PlaylistContent","useParams","nextPageTokenInStore","playlistContentsItems","isEditPlaylistDialogOpen","setIsPlaylistDialogOpen","skeleton","displayPlaylistContent","MosaicMode","Grid","container","direction","rowSpacing","columnSpacing","alignItems","xs","sm","md","lg","Card","CardMedia","image","CardContent","gutterBottom","CardActions","MosaicModeSkeleton","PlaylistList","playlistsItems","userPlaylistDisplayMode","playlistIdToEdit","setPlaylistIdToEdit","arePlaylistsLoading","setArePlaylistsLoading","arePlaylistsLoaded","setArePlaylistsLoaded","useFetchPlaylists","handlePlaylistDisplayMode","openPlaylist","openEditPlaylistDialog","LIST","CircularProgress","Profile","userLanguage","justifyContent","minWidth","changeLanguage","Body","exact","path","LoginScreen","App","theme","React","useMemo","createTheme","palette","main","light","dark","contrastText","typography","fontFamily","clientId","process","ThemeProvider","CssBaseline","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ebb828ff.chunk.js","sourcesContent":["export enum PlaylistDisplayModeEnum {\n    MOSAIC = 'mosaic',\n    LIST = 'list'\n}\n\nexport enum AvailableLangague {\n    FR = 'fr',\n    EN = 'en'\n}\n\nexport interface UserDataInterface {\n    accessToken: string;\n    language: AvailableLangague;\n    email: string;\n    avatar: string;\n    firstName: string;\n    lastName: string;\n    fullName: string;\n    isUserLogin: boolean;\n    playlistDisplayMode: string;\n}\n\nexport const userDefaultData: UserDataInterface = {\n    accessToken: '',\n    language: AvailableLangague.EN,\n    email: '',\n    avatar: '',\n    firstName: '',\n    lastName: '',\n    fullName: '',\n    isUserLogin: false,\n    playlistDisplayMode: PlaylistDisplayModeEnum.MOSAIC\n};\n","import i18n from 'i18next';\nimport {initReactI18next} from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport french from './lang/fr.json';\nimport english from './lang/en.json';\nimport {AvailableLangague} from '../arms/user/state';\n\nconst resources = {\n    en: {\n        translation: english\n    },\n    fr: {\n        translation: french\n    }\n};\n\ni18n.use(LanguageDetector)\n    .use(initReactI18next) // passes i18n down to react-i18next\n    .init({\n        resources,\n        fallbackLng: AvailableLangague.EN,\n        supportedLngs: [AvailableLangague.EN, AvailableLangague.FR],\n        interpolation: {\n            escapeValue: false // react already safes from xss\n        }\n    });\n\nexport default i18n;\n","import AccountCircle from '@mui/icons-material/AccountCircle';\nimport Avatar from '@mui/material/Avatar';\n\nexport enum AvatarSizeEnum {\n    XXXL = 120,\n    XXL = 100,\n    XL = 80,\n    L = 60,\n    MD = 40,\n    SM = 25\n}\n\nfunction AvatarCustom({\n    title,\n    source,\n    size = AvatarSizeEnum.MD\n}: {\n    title: string;\n    source?: string;\n    size?: AvatarSizeEnum;\n}) {\n    function getAvatarSize(paramSize: AvatarSizeEnum) {\n        switch (paramSize) {\n            case AvatarSizeEnum.XXXL:\n                return 120;\n            case AvatarSizeEnum.XXL:\n                return 100;\n            case AvatarSizeEnum.XL:\n                return 80;\n            case AvatarSizeEnum.L:\n                return 60;\n            case AvatarSizeEnum.MD:\n                return 40;\n            case AvatarSizeEnum.SM:\n            default:\n                return 25;\n        }\n    }\n\n    return (\n        <div>\n            {source ? (\n                <Avatar alt={title} src={source} sx={{width: getAvatarSize(size), height: getAvatarSize(size)}} />\n            ) : (\n                <AccountCircle />\n            )}\n        </div>\n    );\n}\n\nexport default AvatarCustom;\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\nimport {AvailableLangague, PlaylistDisplayModeEnum, userDefaultData} from './state';\n\nexport const userSlice = createSlice({\n    name: 'user',\n    initialState: userDefaultData,\n    reducers: {\n        setUserLogin: (state: any, action: PayloadAction<{googleLoginResponse: any}>) => {\n            if (!state.isUserLogin) {\n                state.accessToken = action.payload.googleLoginResponse.accessToken;\n                state.email = action.payload.googleLoginResponse.email;\n                state.avatar = action.payload.googleLoginResponse.avatar;\n                state.firstName = action.payload.googleLoginResponse.firstName;\n                state.lastName = action.payload.googleLoginResponse.lastName;\n                state.fullName = action.payload.googleLoginResponse.fullName;\n                state.language = action.payload.googleLoginResponse.language;\n                state.isUserLogin = true;\n            }\n        },\n        setUserLogout: (state: any) => {\n            state.accessToken = userDefaultData.accessToken;\n            state.email = userDefaultData.email;\n            state.avatar = userDefaultData.avatar;\n            state.firstName = userDefaultData.firstName;\n            state.lastName = userDefaultData.lastName;\n            state.fullName = userDefaultData.fullName;\n            state.isUserLogin = userDefaultData.isUserLogin;\n            state.playlistDisplayMode = userDefaultData.playlistDisplayMode;\n        },\n        setUserLanguage: (state: any, action: PayloadAction<{language: AvailableLangague}>) => {\n            state.language = action.payload.language;\n        },\n        setUserPlaylistDisplayMode: (\n            state: any,\n            action: PayloadAction<{playlistDisplayMode: PlaylistDisplayModeEnum}>\n        ) => {\n            state.playlistDisplayMode = action.payload.playlistDisplayMode;\n        }\n    }\n});\n\nexport const {setUserLogin, setUserLogout, setUserLanguage, setUserPlaylistDisplayMode} = userSlice.actions;\n\nexport default userSlice.reducer;\n","export interface ItemInterface {\r\n    id: string;\r\n    snippet: {\r\n        localized: {\r\n            title: string;\r\n            description: string;\r\n        };\r\n        thumbnails: {\r\n            high: {\r\n                url: string;\r\n            };\r\n        };\r\n    };\r\n    status: {\r\n        privacyStatus: string;\r\n    };\r\n    selected?: boolean;\r\n}\r\n\r\nexport interface ItemsInterface {\r\n    items: Array<ItemInterface>;\r\n}\r\n\r\nexport interface PlaylistsDataInterface {\r\n    prevPageToken: string | undefined;\r\n    currentPageToken: string | undefined;\r\n    nextPageToken: string | undefined;\r\n    items: Array<ItemInterface>;\r\n}\r\n\r\nexport const playlistsDefaultData: PlaylistsDataInterface = {\r\n    prevPageToken: undefined,\r\n    currentPageToken: undefined,\r\n    nextPageToken: undefined,\r\n    items: []\r\n};\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {IApiUpdatePlaylistParams} from '../../api/interface';\r\nimport {ItemInterface, PlaylistsDataInterface, playlistsDefaultData} from './state';\r\n\r\nexport const playlistsSlice = createSlice({\r\n    name: 'playlists',\r\n    initialState: playlistsDefaultData,\r\n    reducers: {\r\n        addPlaylists: (state: any, action: PayloadAction<{playlistsData: PlaylistsDataInterface}>) => {\r\n            if (\r\n                (!('nextPageToken' in action.payload.playlistsData) && state.nextPageToken !== undefined) ||\r\n                (state.nextPageToken === undefined && 'nextPageToken' in action.payload.playlistsData) ||\r\n                ('nextPageToken' in action.payload.playlistsData &&\r\n                    action.payload.playlistsData.nextPageToken !== state.nextPageToken)\r\n            ) {\r\n                state.items = [...state.items, ...action.payload.playlistsData.items];\r\n                state.currentPageToken = state.nextPageToken;\r\n            }\r\n\r\n            state.prevPageToken = action.payload.playlistsData.prevPageToken\r\n                ? action.payload.playlistsData.prevPageToken\r\n                : undefined;\r\n            state.nextPageToken = action.payload.playlistsData.nextPageToken\r\n                ? action.payload.playlistsData.nextPageToken\r\n                : undefined;\r\n        },\r\n        updatePlaylist: (\r\n            state: any,\r\n            action: PayloadAction<{playlistId: string; dataToUpdate: IApiUpdatePlaylistParams}>\r\n        ) => {\r\n            state.items.forEach((item: ItemInterface) => {\r\n                if (item.id === action.payload.playlistId) {\r\n                    item.snippet.localized.title = action.payload.dataToUpdate.title;\r\n                    item.snippet.localized.description = action.payload.dataToUpdate.description;\r\n                    item.status.privacyStatus = action.payload.dataToUpdate.privacyStatus;\r\n                }\r\n            });\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addPlaylists, updatePlaylist} = playlistsSlice.actions;\r\n\r\nexport default playlistsSlice.reducer;\r\n","export interface ResourceIdInterface {\r\n    kind: string;\r\n    videoId: string;\r\n}\r\n\r\nexport const defaultItemResourceId: ResourceIdInterface = {\r\n    kind: '',\r\n    videoId: ''\r\n};\r\n\r\nexport interface ItemInterface {\r\n    id: string;\r\n    snippet: {\r\n        title: string;\r\n        videoOwnerChannelTitle: string;\r\n        thumbnails: {\r\n            high: {\r\n                url: string;\r\n            };\r\n        };\r\n        resourceId: ResourceIdInterface;\r\n    };\r\n}\r\n\r\nexport interface ContentsInterface {\r\n    items: Array<ItemInterface>;\r\n}\r\n\r\nexport interface PlaylistContentsDataInterface {\r\n    playlistId: string;\r\n    prevPageToken: string | undefined;\r\n    nextPageToken: string | undefined;\r\n    items: Array<ItemInterface>;\r\n}\r\n\r\nexport const playlistContentsDefaultData: PlaylistContentsDataInterface = {\r\n    playlistId: '',\r\n    prevPageToken: undefined,\r\n    nextPageToken: undefined,\r\n    items: []\r\n};\r\n","import {createSlice, PayloadAction} from '@reduxjs/toolkit';\r\nimport {ItemInterface} from '../playlists/state';\r\nimport {PlaylistContentsDataInterface, playlistContentsDefaultData} from './state';\r\n\r\nexport const playlistContentsSlice = createSlice({\r\n    name: 'playlistContents',\r\n    initialState: playlistContentsDefaultData,\r\n    reducers: {\r\n        addPlaylistContents: (\r\n            state: any,\r\n            action: PayloadAction<{playlistId: string; playListContentsData: PlaylistContentsDataInterface}>\r\n        ) => {\r\n            if (state.playlistId !== action.payload.playlistId) {\r\n                state.playlistId = action.payload.playlistId;\r\n                state.items = [];\r\n            }\r\n\r\n            state.prevPageToken = action.payload.playListContentsData.prevPageToken\r\n                ? action.payload.playListContentsData.prevPageToken\r\n                : undefined;\r\n            state.nextPageToken = action.payload.playListContentsData.nextPageToken\r\n                ? action.payload.playListContentsData.nextPageToken\r\n                : undefined;\r\n            state.items = [...state.items, ...action.payload.playListContentsData.items];\r\n        },\r\n        removePlaylistContents: (state: any, action: PayloadAction<{}>) => {\r\n            state.playlistId = playlistContentsDefaultData.playlistId;\r\n            state.prevPageToken = playlistContentsDefaultData.prevPageToken;\r\n            state.nextPageToken = playlistContentsDefaultData.nextPageToken;\r\n            state.items = playlistContentsDefaultData.items;\r\n        },\r\n        removeContent: (state: any, action: PayloadAction<{id: string}>) => {\r\n            state.items = state.items.filter((item: ItemInterface) => item.id !== action.payload.id);\r\n        }\r\n    }\r\n});\r\n\r\nexport const {addPlaylistContents, removePlaylistContents, removeContent} = playlistContentsSlice.actions;\r\n\r\nexport default playlistContentsSlice.reducer;\r\n","import {combineReducers, configureStore} from '@reduxjs/toolkit';\nimport userReducer from '../utils/arms/user/reducer';\nimport playlistsReducer from '../utils/arms/playlists/reducer';\nimport playlistContentsReducer from '../utils/arms/playlistContents/reducer';\n\nconst combinedReducer = combineReducers({\n    user: userReducer,\n    playlistContents: playlistContentsReducer,\n    playlists: playlistsReducer\n});\n\nconst store = configureStore({\n    reducer: combinedReducer\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport default store;\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\nimport type {RootState, AppDispatch} from './store';\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import {RootState} from '../../../app/store';\n\nexport const selectIsUserLogin = (state: RootState) => {\n    return state.user.isUserLogin;\n};\n\nexport const selectUserFullName = (state: RootState) => {\n    return state.user.fullName;\n};\n\nexport const selectUserAvatar = (state: RootState) => {\n    return state.user.avatar;\n};\n\nexport const selectUserLanguage = (state: RootState) => {\n    return state.user.language;\n};\n\nexport const selectUserAccessToken = (state: RootState) => {\n    return state.user.accessToken;\n};\n\nexport const selectUserPlaylistDisplayMode = (state: RootState) => {\n    return state.user.playlistDisplayMode;\n};\n","import HomeOutlinedIcon from '@mui/icons-material/HomeOutlined';\nimport LogoutOutlinedIcon from '@mui/icons-material/LogoutOutlined';\nimport {Menu, MenuItem, IconButton, Typography, Toolbar, Box, AppBar, Divider, Tooltip} from '@mui/material';\n\nimport AvatarCustom, {AvatarSizeEnum} from '../../components/AvatarCustom';\nimport './styles.css';\n\nimport {useState} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {setUserLogout} from '../../utils/arms/user/reducer';\nimport {selectIsUserLogin, selectUserFullName, selectUserAvatar} from '../../utils/arms/user/selectors';\nimport {useTranslation} from 'react-i18next';\n\nfunction Header() {\n    let history = useHistory();\n\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n    const isUserLogin = useAppSelector(selectIsUserLogin);\n    const userFullName = useAppSelector(selectUserFullName);\n    const userAvatar = useAppSelector(selectUserAvatar);\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n\n    const handleMenu = (event: React.MouseEvent<HTMLButtonElement>) => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = () => {\n        setAnchorEl(null);\n    };\n\n    const handleClickOnGoHome = () => {\n        history.push('/playlists');\n    };\n\n    const handleClickOnLogout = () => {\n        dispatch(setUserLogout());\n        setAnchorEl(null);\n    };\n\n    const handleClickOnGoToMyProfile = () => {\n        history.push('/profile');\n        setAnchorEl(null);\n    };\n\n    return (\n        <Box sx={{flexGrow: 1}}>\n            <AppBar className=\"appbar-wrapper\" position=\"fixed\">\n                <Toolbar>\n                    {isUserLogin && (\n                        <Tooltip title={t('home')}>\n                            <IconButton\n                                size=\"large\"\n                                edge=\"start\"\n                                color=\"inherit\"\n                                sx={{mr: 2}}\n                                onClick={() => handleClickOnGoHome()}\n                            >\n                                <HomeOutlinedIcon />\n                            </IconButton>\n                        </Tooltip>\n                    )}\n                    <div className=\"title-wrapper\">\n                        <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                            {t('application name')}\n                        </Typography>\n                    </div>\n                    {isUserLogin && (\n                        <div>\n                            <IconButton\n                                size=\"large\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={handleMenu}\n                                color=\"inherit\"\n                            >\n                                <AvatarCustom title={userFullName} source={userAvatar} size={AvatarSizeEnum.MD} />\n                            </IconButton>\n                            <Menu\n                                id=\"menu-appbar\"\n                                anchorEl={anchorEl}\n                                anchorOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right'\n                                }}\n                                keepMounted\n                                transformOrigin={{\n                                    vertical: 'top',\n                                    horizontal: 'right'\n                                }}\n                                disableScrollLock={true}\n                                open={Boolean(anchorEl)}\n                                onClose={handleClose}\n                            >\n                                <MenuItem key=\"profil\" onClick={handleClickOnGoToMyProfile}>\n                                    <AvatarCustom title={userFullName} source={userAvatar} size={AvatarSizeEnum.SM} />\n                                    <span className=\"header-menuitem-margin-left\">{t('my profile')}</span>\n                                </MenuItem>\n                                <Divider />\n                                <MenuItem key=\"logout\" onClick={handleClickOnLogout}>\n                                    <LogoutOutlinedIcon />\n                                    <span className=\"header-menuitem-margin-left\">{t('sign out')}</span>\n                                </MenuItem>\n                            </Menu>\n                        </div>\n                    )}\n                </Toolbar>\n            </AppBar>\n        </Box>\n    );\n}\n\nexport default Header;\n","export default __webpack_public_path__ + \"static/media/media-player.4e14d8d0.png\";","// Aspact ratio : 1724:1221\r\nimport mediaPlayer from '../../../assets/media-player.png';\r\nimport './styles.css';\r\n\r\nfunction LoginIllustration() {\r\n    return (\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://storyset.com/web\">\r\n            <img className=\"login-screen-illustration\" src={mediaPlayer} alt=\"Personne travaillant sur un ordinateur\" />\r\n        </a>\r\n    );\r\n}\r\n\r\nexport default LoginIllustration;\r\n","export interface IApiUrlParams {\n    part?: string;\n    maxResults?: number;\n    mine?: boolean;\n    playlistId?: string;\n    pageToken?: string;\n    id?: string;\n}\n\nexport interface IApiBodyParams {\n    id?: string;\n    snippet?: {\n        title?: string;\n        description?: string;\n        resourceId?: IResourceId;\n        playlistId?: string;\n    };\n    status?: {\n        privacyStatus: string;\n    };\n}\n\nexport interface IApiUpdatePlaylistParams {\n    title: string;\n    description: string;\n    privacyStatus: string;\n}\n\nexport interface IResourceId {\n    kind: string;\n    videoId: string;\n}\n\nexport enum RequestMethodEnum {\n    GET = 'GET',\n    POST = 'POST',\n    PUT = 'PUT',\n    PATCH = 'PATCH',\n    DELETE = 'DELETE'\n}\n","import axios from 'axios';\nimport {IApiUrlParams, IApiBodyParams, IApiUpdatePlaylistParams, IResourceId, RequestMethodEnum} from './interface';\n\nconst BASE_YOUTUBE_API_URL = 'https://www.googleapis.com/youtube/v3/';\nconst BASE_USER_INFO_API = 'https://www.googleapis.com/oauth2/v3/userinfo';\n\nconst toPostData = (datas: IApiBodyParams | undefined) => {\n    let str = '';\n\n    if (datas) {\n        Object.entries(datas).forEach(([key, value]) => {\n            str = str + `&${key}=${decodeURIComponent(value)}`;\n        });\n    }\n\n    return str;\n};\n\nfunction requestYoutubeApi(\n    accessToken: string,\n    method: RequestMethodEnum,\n    endPoint: string,\n    urlParams: IApiUrlParams,\n    bodyParams?: IApiBodyParams\n) {\n    let apiUrl = `${BASE_YOUTUBE_API_URL}${endPoint}?access_token=${accessToken}` + toPostData(urlParams);\n\n    return axios({\n        method: method,\n        url: apiUrl,\n        responseType: 'json',\n        data: bodyParams\n    })\n        .then(response => {\n            return response.data;\n        })\n        .catch(error => {\n            console.log('error', error);\n            throw error;\n        });\n}\n\nfunction requestUserInfoApi(accessToken: string) {\n    const headers = {\n        headers: {\n            Authorization: `Bearer ${accessToken}`\n        }\n    };\n\n    return axios(BASE_USER_INFO_API, headers)\n        .then(response => {\n            return response;\n        })\n        .catch(error => {\n            console.log('error', error);\n            throw error;\n        });\n}\n\nexport function getYoutubePlaylists(accessToken: string, pageToken?: string, playlistIds?: Array<String>) {\n    const urlParams: IApiUrlParams = {\n        part: 'snippet,contentDetails,id,localizations,player,snippet,status',\n        mine: true,\n        maxResults: 10\n    };\n\n    if (pageToken !== undefined) {\n        urlParams.pageToken = pageToken;\n    }\n\n    if (playlistIds !== undefined) {\n        delete urlParams.mine;\n        urlParams.id = playlistIds.join(',');\n    }\n\n    return requestYoutubeApi(accessToken, RequestMethodEnum.GET, 'playlists', urlParams);\n}\n\nexport function updatePlaylistData(accessToken: string, playlistId: string, data: IApiUpdatePlaylistParams) {\n    const urlParams: IApiUrlParams = {\n        part: 'snippet,status'\n    };\n\n    const bodyParams: IApiBodyParams = {\n        id: playlistId,\n        snippet: {\n            title: data.title,\n            description: data.description\n        },\n        status: {\n            privacyStatus: data.privacyStatus\n        }\n    };\n\n    return requestYoutubeApi(accessToken, RequestMethodEnum.PUT, 'playlists', urlParams, bodyParams);\n}\n\nexport function getYoutubePlaylistsItems(accessToken: string, playlistId: string, pageToken?: string) {\n    const urlParams: IApiUrlParams = {\n        part: 'snippet,contentDetails,id,status',\n        playlistId: playlistId,\n        maxResults: 50\n    };\n\n    if (pageToken !== undefined) {\n        urlParams.pageToken = pageToken;\n    }\n\n    return requestYoutubeApi(accessToken, RequestMethodEnum.GET, 'playlistItems', urlParams);\n}\n\nexport function deleteItemFromPlaylist(accessToken: string, itemId: string) {\n    const urlParams: IApiUrlParams = {\n        part: 'id'\n    };\n\n    const bodyParams: IApiBodyParams = {\n        id: itemId\n    };\n\n    return requestYoutubeApi(accessToken, RequestMethodEnum.DELETE, 'playlistItems', urlParams, bodyParams);\n}\n\nexport function insertItemToPlaylist(accessToken: string, resourceId: IResourceId, playlistId: string) {\n    const urlParams: IApiUrlParams = {\n        part: 'snippet'\n    };\n\n    const bodyParams: IApiBodyParams = {\n        snippet: {\n            playlistId: playlistId,\n            resourceId: resourceId\n        }\n    };\n\n    return requestYoutubeApi(accessToken, RequestMethodEnum.POST, 'playlistItems', urlParams, bodyParams);\n}\n\nexport function getUserInfo(accessToken: string) {\n    return requestUserInfoApi(accessToken);\n}\n","import './styles.css';\nimport {useAppDispatch} from '../../app/hooks';\nimport {useGoogleLogin} from '@react-oauth/google';\n\nimport {useHistory} from 'react-router';\nimport {AvailableLangague, UserDataInterface, userDefaultData} from '../../utils/arms/user/state';\nimport {setUserLogin} from '../../utils/arms/user/reducer';\nimport LoginIllustration from '../../components/Assets/LoginIllustration';\nimport {useTranslation} from 'react-i18next';\nimport {Button} from '@mui/material';\nimport {getUserInfo} from '../../utils/api';\nimport GoogleIcon from '@mui/icons-material/Google';\n\nfunction Login() {\n    let history = useHistory();\n\n    const {t, i18n} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const login = useGoogleLogin({\n        prompt: 'select_account',\n        scope: 'https://www.googleapis.com/auth/youtube',\n        onSuccess: async res => {\n            const {data} = await getUserInfo(res.access_token);\n\n            const loginResponse: UserDataInterface = {\n                accessToken: res.access_token,\n                email: data.email,\n                avatar: data.picture,\n                firstName: data.given_name,\n                lastName: data.family_name,\n                fullName: data.name,\n                isUserLogin: true,\n                language: i18n.language as AvailableLangague,\n                playlistDisplayMode: userDefaultData.playlistDisplayMode\n            };\n\n            dispatch(setUserLogin({googleLoginResponse: loginResponse}));\n            history.push('/playlists');\n        },\n        onError: () => {\n            console.error('An error occured while sign in');\n        }\n    });\n\n    return (\n        <div className=\"login-screen-container\">\n            <div className=\"left-col\">\n                <h1 className=\"title\">{t('login screen title')}</h1>\n                <span>{t('login screen subtitle')}</span>\n                <div className=\"login-button\">\n                    <Button startIcon={<GoogleIcon />} variant=\"contained\" color=\"secondary\" onClick={() => login()}>\n                        {t('sign in')}\n                    </Button>\n                </div>\n            </div>\n            <div className=\"right-col\">\n                <LoginIllustration />\n            </div>\n        </div>\n    );\n}\n\nexport default Login;\n","import {useEffect, useState} from 'react';\r\nimport {useAppDispatch} from '../../app/hooks';\r\nimport {getYoutubePlaylistsItems} from '../../utils/api';\r\nimport {addPlaylistContents} from '../../utils/arms/playlistContents/reducer';\r\n\r\nexport const useFetchPlaylistContents = (\r\n    userAccessToken: string,\r\n    playlistId: string,\r\n    nextPageToken: string | undefined\r\n) => {\r\n    const [arePlaylistContentsLoading, setArePlaylistContentsLoading] = useState(false);\r\n    const [arePlaylistContentsLoaded, setArePlaylistContentsLoaded] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        setArePlaylistContentsLoading(true);\r\n        setArePlaylistContentsLoaded(false);\r\n\r\n        getYoutubePlaylistsItems(userAccessToken, playlistId, nextPageToken).then(data => {\r\n            dispatch(addPlaylistContents({playlistId: playlistId, playListContentsData: data}));\r\n            setArePlaylistContentsLoading(false);\r\n            setArePlaylistContentsLoaded(true);\r\n        });\r\n    }, [dispatch, userAccessToken, playlistId, nextPageToken]);\r\n\r\n    return {arePlaylistContentsLoading, arePlaylistContentsLoaded};\r\n};\r\n","import {RootState} from '../../../app/store';\r\n\r\nexport const selectPlaylistContentsPrevPageToken = (state: RootState) => {\r\n    return state.playlistContents.prevPageToken;\r\n};\r\n\r\nexport const selectPlaylistContentsNextPageToken = (state: RootState) => {\r\n    return state.playlistContents.nextPageToken;\r\n};\r\n\r\nexport const selectPlaylistContentsItems = (state: RootState) => {\r\n    return state.playlistContents.items;\r\n};\r\n","import {RootState} from '../../../app/store';\r\n\r\nexport const selectPlaylistsPrevPageToken = (state: RootState) => {\r\n    return state.playlists.prevPageToken;\r\n};\r\n\r\nexport const selectPlaylistsCurrentPageToken = (state: RootState) => {\r\n    return state.playlists.currentPageToken;\r\n};\r\n\r\nexport const selectPlaylistsNextPageToken = (state: RootState) => {\r\n    return state.playlists.nextPageToken;\r\n};\r\n\r\nexport const selectPlaylistsItems = (state: RootState) => {\r\n    return state.playlists.items;\r\n};\r\n\r\nexport const selectPlaylistItem = (state: RootState, playlistId: string | undefined) => {\r\n    const playlistItem = Object.values(state.playlists.items).filter(item => {\r\n        return item.id === playlistId;\r\n    });\r\n\r\n    return playlistItem[0];\r\n};\r\n","import {AppDispatch} from '../../../app/store';\nimport {updatePlaylistData} from '../../api';\nimport {IApiUpdatePlaylistParams} from '../../api/interface';\nimport {updatePlaylist} from './reducer';\n\nexport const updatePlaylistDataAction = (payload: {\n    userAccessToken: string;\n    playlistId: string;\n    data: IApiUpdatePlaylistParams;\n}) => {\n    return async (dispatch: AppDispatch) => {\n        try {\n            await updatePlaylistData(payload.userAccessToken, payload.playlistId, payload.data);\n            dispatch(updatePlaylist({playlistId: payload.playlistId, dataToUpdate: payload.data}));\n        } catch (e) {\n            console.error(`Error while updating playlist (${payload.playlistId})`);\n            throw e;\n        }\n    };\n};\n","import {\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogActions,\r\n    Button,\r\n    DialogContent,\r\n    TextField,\r\n    MenuItem,\r\n    ListItemText,\r\n    Snackbar,\r\n    Alert,\r\n    AlertColor\r\n} from '@mui/material';\r\nimport {useAppDispatch, useAppSelector} from '../../../app/hooks';\r\nimport {selectUserAccessToken} from '../../../utils/arms/user/selectors';\r\nimport {useEffect, useState} from 'react';\r\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\r\nimport PublicOutlinedIcon from '@mui/icons-material/PublicOutlined';\r\nimport VisibilityOffOutlinedIcon from '@mui/icons-material/VisibilityOffOutlined';\r\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\r\n\r\nimport './styles.css';\r\nimport {selectPlaylistItem} from '../../../utils/arms/playlists/selectors';\r\nimport {IApiUpdatePlaylistParams} from '../../../utils/api/interface';\r\nimport {updatePlaylistDataAction} from '../../../utils/arms/playlists/middleware';\r\nimport {LoadingButton} from '@mui/lab';\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nfunction EditPlaylistDialog({\r\n    visible = false,\r\n    playlistId,\r\n    onCancel\r\n}: {\r\n    visible: boolean;\r\n    playlistId: string | undefined;\r\n    onCancel: Function;\r\n}) {\r\n    const {t} = useTranslation();\r\n    const dispatch = useAppDispatch();\r\n    const userAccessToken = useAppSelector(selectUserAccessToken);\r\n    const playlistItem = useAppSelector(state => selectPlaylistItem(state, playlistId));\r\n\r\n    const [title, setTitle] = useState(playlistItem.snippet.localized.title);\r\n    const [description, setDescription] = useState(playlistItem.snippet.localized.description);\r\n    const [status, setStatus] = useState(playlistItem.status.privacyStatus);\r\n    const [titleError, setTitleError] = useState(false);\r\n    const [canSave, setCanSave] = useState(true);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    const [snackbarVisible, setSnackbarVisible] = useState(false);\r\n    const [snackbarMessage, setSnackbarMessage] = useState('');\r\n    const [snackbarSeverity, setSnackbarSeverity] = useState<AlertColor>('info');\r\n\r\n    const executeOnCancel = () => {\r\n        setCanSave(true);\r\n        setIsSaving(false);\r\n        onCancel();\r\n    };\r\n\r\n    const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.target.value);\r\n        setTitleError(event.target.value.length === 0);\r\n        setCanSave(event.target.value.length === 0);\r\n    };\r\n\r\n    const handleDescriptionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setDescription(event.target.value);\r\n    };\r\n\r\n    const handleStatusChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.target.value);\r\n    };\r\n\r\n    const onSave = async () => {\r\n        if (playlistId !== undefined) {\r\n            try {\r\n                const dataToSave: IApiUpdatePlaylistParams = {\r\n                    title: title,\r\n                    description: description,\r\n                    privacyStatus: status\r\n                };\r\n\r\n                setIsSaving(true);\r\n\r\n                await dispatch(\r\n                    updatePlaylistDataAction({\r\n                        userAccessToken: userAccessToken,\r\n                        playlistId: playlistId,\r\n                        data: dataToSave\r\n                    })\r\n                );\r\n\r\n                executeOnCancel();\r\n                setSnackbarMessage(t('playlist data update success'));\r\n                setSnackbarSeverity('success');\r\n                setSnackbarVisible(true);\r\n            } catch {\r\n                executeOnCancel();\r\n                setSnackbarMessage(t('playlist data update error'));\r\n                setSnackbarSeverity('error');\r\n                setSnackbarVisible(true);\r\n            }\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        setTitle(playlistItem.snippet.localized.title);\r\n        setTitleError(playlistItem.snippet.localized.title.length === 0);\r\n        setDescription(playlistItem.snippet.localized.description);\r\n        setStatus(playlistItem.status.privacyStatus);\r\n        setCanSave(playlistItem.snippet.localized.title.length === 0);\r\n    }, [playlistItem, visible]);\r\n\r\n    return (\r\n        <>\r\n            <Dialog open={visible} fullWidth maxWidth=\"sm\">\r\n                <DialogTitle id=\"alert-dialog-title\">\r\n                    {t('edit playlist')} : {playlistItem.snippet.localized.title}\r\n                </DialogTitle>\r\n                <DialogContent>\r\n                    <TextField\r\n                        error={titleError}\r\n                        required\r\n                        id=\"edit-playlist-title\"\r\n                        margin=\"normal\"\r\n                        color=\"secondary\"\r\n                        label={t('title')}\r\n                        value={title}\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        onChange={handleTitleChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField\r\n                        margin=\"normal\"\r\n                        id=\"edit-playlist-description\"\r\n                        color=\"secondary\"\r\n                        label={t('description')}\r\n                        value={description}\r\n                        type=\"text\"\r\n                        fullWidth\r\n                        onChange={handleDescriptionChange}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField\r\n                        select\r\n                        margin=\"normal\"\r\n                        id=\"edit-playlist-select-status\"\r\n                        color=\"secondary\"\r\n                        label={t('status')}\r\n                        value={status}\r\n                        fullWidth\r\n                        onChange={handleStatusChange}\r\n                        variant=\"outlined\"\r\n                    >\r\n                        <MenuItem key=\"public\" value=\"public\">\r\n                            <PublicOutlinedIcon />\r\n                            <ListItemText className=\"select-item-text\" primary={t('public')} />\r\n                        </MenuItem>\r\n                        <MenuItem key=\"unlisted\" value=\"unlisted\">\r\n                            <VisibilityOffOutlinedIcon />\r\n                            <ListItemText className=\"select-item-text\" primary={t('not listed')} />\r\n                        </MenuItem>\r\n                        <MenuItem key=\"private\" value=\"private\">\r\n                            <LockOutlinedIcon />\r\n                            <ListItemText className=\"select-item-text\" primary={t('private')} />\r\n                        </MenuItem>\r\n                    </TextField>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={() => executeOnCancel()}>{t('close')}</Button>\r\n                    <LoadingButton\r\n                        loading={isSaving}\r\n                        disabled={canSave}\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        startIcon={<SaveOutlinedIcon />}\r\n                        onClick={onSave}\r\n                    >\r\n                        {t('save')}\r\n                    </LoadingButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n            <Snackbar\r\n                open={snackbarVisible}\r\n                anchorOrigin={{horizontal: 'right', vertical: 'bottom'}}\r\n                autoHideDuration={4000}\r\n                onClose={() => setSnackbarVisible(false)}\r\n            >\r\n                <Alert severity={snackbarSeverity}>{snackbarMessage}</Alert>\r\n            </Snackbar>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default EditPlaylistDialog;\r\n","export default __webpack_public_path__ + \"static/media/empty-state.015a12ae.png\";","// Aspact ratio : 223:175\r\nimport emptyState from '../../../assets/empty-state.png';\r\nimport './styles.css';\r\n\r\nfunction EmptyIllustration({title}: {title?: string}) {\r\n    return (\r\n        <div className=\"empty-illustration-wrapper\">\r\n            <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://storyset.com/web\">\r\n                <img className=\"empty-illustration\" src={emptyState} alt=\"Personne travaillant sur un ordinateur\" />\r\n            </a>\r\n            {title && <p>{title}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default EmptyIllustration;\r\n","import {List, ListItem, ListItemAvatar, Avatar, Divider, ListItemText, Typography, Radio, Tooltip} from '@mui/material';\nimport React, {useState} from 'react';\n\nimport IconButton from '@mui/material/IconButton';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport LaunchOutlinedIcon from '@mui/icons-material/LaunchOutlined';\n\nimport './styles.css';\nimport {ItemInterface, ItemsInterface} from '../../../utils/arms/playlists/state';\nimport {useTranslation} from 'react-i18next';\n\nexport enum DisplayListModeEnum {\n    DEFAULT = 'default',\n    SELECTION = 'selection'\n}\n\nfunction ListMode({\n    playlistsListData,\n    setCanExecuteAfterSelect,\n    setSelectedPlaylistId,\n    mode = DisplayListModeEnum.DEFAULT,\n    onClickOnEditPlaylist,\n    onClickOnOpenPlaylist\n}: {\n    playlistsListData: ItemsInterface;\n    setCanExecuteAfterSelect?: Function;\n    setSelectedPlaylistId?: Function;\n    mode?: DisplayListModeEnum;\n    onClickOnEditPlaylist?: Function;\n    onClickOnOpenPlaylist?: Function;\n}) {\n    const {t} = useTranslation();\n    const [selectedPlaylist, setSelectedPlaylist] = useState('');\n\n    const handleChangeSelectedPlaylist = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setSelectedPlaylist(event.target.value);\n\n        if (setCanExecuteAfterSelect !== undefined) {\n            setCanExecuteAfterSelect(true);\n        }\n\n        if (setSelectedPlaylistId !== undefined) {\n            setSelectedPlaylistId(event.target.value);\n        }\n    };\n\n    const handleListItemSecondaryActionByMode = (PlaylistData: ItemInterface) => {\n        if (mode === DisplayListModeEnum.DEFAULT && onClickOnEditPlaylist && onClickOnOpenPlaylist) {\n            return (\n                <div>\n                    <Tooltip title={t('edit')}>\n                        <IconButton\n                            className=\"margin\"\n                            edge=\"end\"\n                            onClick={() => onClickOnEditPlaylist(PlaylistData.id)}\n                        >\n                            <EditOutlinedIcon />\n                        </IconButton>\n                    </Tooltip>\n                    <Tooltip title={t('open playlist')}>\n                        <IconButton edge=\"end\" onClick={() => onClickOnOpenPlaylist(PlaylistData.id)}>\n                            <LaunchOutlinedIcon />\n                        </IconButton>\n                    </Tooltip>\n                </div>\n            );\n        }\n    };\n\n    const handleListItemAvatarByMode = (PlaylistData: ItemInterface) => {\n        if (mode === DisplayListModeEnum.DEFAULT && onClickOnOpenPlaylist) {\n            return (\n                <Avatar\n                    className=\"open-playlist-pointer\"\n                    sx={{width: 120, height: 85}}\n                    alt={PlaylistData.snippet.localized.title}\n                    src={PlaylistData.snippet.thumbnails.high.url}\n                    variant=\"square\"\n                    onClick={() => onClickOnOpenPlaylist(PlaylistData.id)}\n                />\n            );\n        } else if (mode === DisplayListModeEnum.SELECTION) {\n            return (\n                <Avatar\n                    sx={{width: 90, height: 75}}\n                    alt={PlaylistData.snippet.localized.title}\n                    src={PlaylistData.snippet.thumbnails.high.url}\n                    variant=\"square\"\n                />\n            );\n        }\n    };\n\n    const handleRadioButtonByMode = (PlaylistData: ItemInterface) => {\n        if (mode === DisplayListModeEnum.SELECTION) {\n            return (\n                <Radio\n                    checked={selectedPlaylist === PlaylistData.id}\n                    onChange={handleChangeSelectedPlaylist}\n                    value={PlaylistData.id}\n                    name=\"select-playlist\"\n                    color=\"secondary\"\n                />\n            );\n        }\n    };\n\n    const handleClickOnItem = (PlaylistData: ItemInterface) => {\n        if (mode === DisplayListModeEnum.SELECTION) {\n            setSelectedPlaylist(PlaylistData.id);\n\n            if (setCanExecuteAfterSelect !== undefined) {\n                setCanExecuteAfterSelect(true);\n            }\n\n            if (setSelectedPlaylistId !== undefined) {\n                setSelectedPlaylistId(PlaylistData.id);\n            }\n        }\n    };\n\n    return (\n        <List className={`${mode === DisplayListModeEnum.DEFAULT ? 'list-container' : ''}`}>\n            {playlistsListData.items?.map((PlaylistData, index) => (\n                <div\n                    className={`item ${mode === DisplayListModeEnum.SELECTION ? 'item-selectable' : ''} ${\n                        selectedPlaylist === PlaylistData.id ? 'item-selected' : ''\n                    }`}\n                    key={PlaylistData.id}\n                    onClick={() => handleClickOnItem(PlaylistData)}\n                >\n                    <ListItem secondaryAction={handleListItemSecondaryActionByMode(PlaylistData)}>\n                        {handleRadioButtonByMode(PlaylistData)}\n                        <ListItemAvatar>{handleListItemAvatarByMode(PlaylistData)}</ListItemAvatar>\n                        <ListItemText\n                            className=\"list-item-text list-item-text-margin\"\n                            primary={\n                                <Typography\n                                    className=\"primary open-playlist-pointer\"\n                                    variant=\"h6\"\n                                    color=\"text.primary\"\n                                    onClick={() =>\n                                        mode === DisplayListModeEnum.DEFAULT &&\n                                        onClickOnOpenPlaylist &&\n                                        onClickOnOpenPlaylist(PlaylistData.id)\n                                    }\n                                >\n                                    {PlaylistData.snippet.localized.title}\n                                </Typography>\n                            }\n                            secondary={\n                                <Typography className=\"secondary\" variant=\"body2\" color=\"text.secondary\">\n                                    {PlaylistData.snippet.localized.description === ''\n                                        ? t('no description')\n                                        : PlaylistData.snippet.localized.description}\n                                </Typography>\n                            }\n                        />\n                    </ListItem>\n\n                    {index + 1 < playlistsListData.items.length && (\n                        <Divider className=\"divider\" variant=\"middle\" component=\"li\" />\n                    )}\n                </div>\n            ))}\n        </List>\n    );\n}\n\nexport default ListMode;\n","import {Dialog, DialogTitle, DialogActions, Button, DialogContent} from '@mui/material';\r\n\r\nimport './styles.css';\r\nimport {ReactElement, useCallback, useEffect, useState} from 'react';\r\nimport {getYoutubePlaylists} from '../../../utils/api/index';\r\nimport {ItemsInterface} from '../../../utils/arms/playlists/state';\r\nimport {LoadingButton} from '@mui/lab';\r\nimport {useTranslation} from 'react-i18next';\r\nimport ListMode, {DisplayListModeEnum} from '../../../components/Playlists/ListMode';\r\n\r\nfunction SelectPlaylistDialog({\r\n    visible,\r\n    userAccessToken,\r\n    currentPlaylistId = '',\r\n    hideCurrentPlaylist = false,\r\n    title = '',\r\n    confirmText = '',\r\n    confirmIcon,\r\n    onConfirm,\r\n    onCancel\r\n}: {\r\n    visible: boolean;\r\n    userAccessToken: string;\r\n    currentPlaylistId?: string;\r\n    hideCurrentPlaylist?: boolean;\r\n    title?: string;\r\n    confirmText?: string;\r\n    confirmIcon?: ReactElement;\r\n    onConfirm: Function;\r\n    onCancel: Function;\r\n}) {\r\n    const {t} = useTranslation();\r\n    const [playlistsListData, setPlaylistsListData] = useState<ItemsInterface>({items: []});\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [isLoaded, setIsLoaded] = useState(false);\r\n    const [nextPageToken, setNextPageToken] = useState('');\r\n    const [selectedPlaylistId, setSelectedPlaylistId] = useState('');\r\n    const [canSave, setCanSave] = useState(false);\r\n    const [isSaving, setIsSaving] = useState(false);\r\n\r\n    if (title === '') {\r\n        title = t('selection');\r\n    }\r\n\r\n    if (confirmText === '') {\r\n        confirmText = t('confirm');\r\n    }\r\n\r\n    const executeOnCancel = () => {\r\n        setCanSave(false);\r\n        setIsSaving(false);\r\n        onCancel();\r\n    };\r\n\r\n    const onSave = async () => {\r\n        setIsSaving(true);\r\n        setCanSave(false);\r\n        await onConfirm(selectedPlaylistId);\r\n        setIsSaving(false);\r\n        setCanSave(false);\r\n    };\r\n\r\n    const loadPlaylistsList = useCallback(() => {\r\n        if (!isLoaded && !isLoading && visible) {\r\n            setIsLoading(true);\r\n            getYoutubePlaylists(userAccessToken, nextPageToken).then(data => {\r\n                setIsLoading(false);\r\n                setIsLoaded(true);\r\n                let newItems = [...playlistsListData.items, ...data.items];\r\n                if (hideCurrentPlaylist && currentPlaylistId !== '') {\r\n                    newItems = newItems.filter(item => {\r\n                        return item.id !== currentPlaylistId;\r\n                    });\r\n                }\r\n                data.items = newItems;\r\n                setPlaylistsListData(data);\r\n                setNextPageToken(data.nextPageToken);\r\n            });\r\n        }\r\n    }, [\r\n        userAccessToken,\r\n        currentPlaylistId,\r\n        visible,\r\n        hideCurrentPlaylist,\r\n        nextPageToken,\r\n        isLoading,\r\n        isLoaded,\r\n        playlistsListData\r\n    ]);\r\n\r\n    const loadMorePlaylistList = () => {\r\n        setIsLoaded(false);\r\n        loadPlaylistsList();\r\n    };\r\n\r\n    useEffect(() => {\r\n        loadPlaylistsList();\r\n    }, [loadPlaylistsList]);\r\n\r\n    return (\r\n        <Dialog className=\"dialog-select-playlist\" open={visible} fullWidth maxWidth=\"sm\">\r\n            <DialogTitle>{title}</DialogTitle>\r\n            <DialogContent>\r\n                {playlistsListData && (\r\n                    <ListMode\r\n                        playlistsListData={playlistsListData}\r\n                        setCanExecuteAfterSelect={setCanSave}\r\n                        setSelectedPlaylistId={setSelectedPlaylistId}\r\n                        mode={DisplayListModeEnum.SELECTION}\r\n                    />\r\n                )}\r\n                {!isLoading && nextPageToken !== undefined && (\r\n                    <div className=\"see-more-container\">\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            onClick={() => {\r\n                                loadMorePlaylistList();\r\n                            }}\r\n                        >\r\n                            {t('see more')} ...\r\n                        </Button>\r\n                    </div>\r\n                )}\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => executeOnCancel()}>{t('close')}</Button>\r\n                <LoadingButton\r\n                    loading={isSaving}\r\n                    disabled={!canSave}\r\n                    variant=\"contained\"\r\n                    color=\"secondary\"\r\n                    startIcon={confirmIcon}\r\n                    onClick={onSave}\r\n                >\r\n                    {confirmText}\r\n                </LoadingButton>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default SelectPlaylistDialog;\r\n","import {AppDispatch} from '../../../app/store';\nimport {deleteItemFromPlaylist, insertItemToPlaylist} from '../../api';\nimport {removeContent} from './reducer';\nimport {ResourceIdInterface} from './state';\n\nexport const deleteItemFromPlaylistAction = (payload: {userAccessToken: string; itemId: string}) => {\n    return async (dispatch: AppDispatch) => {\n        try {\n            await deleteItemFromPlaylist(payload.userAccessToken, payload.itemId);\n            dispatch(removeContent({id: payload.itemId}));\n        } catch (e) {\n            console.error(`Error while deleting item (${payload.itemId})`);\n            throw e;\n        }\n    };\n};\n\nexport const insertItemToPlaylistAction = (payload: {\n    userAccessToken: string;\n    itemResourceId: ResourceIdInterface;\n    playlistId: string;\n}) => {\n    return async () => {\n        try {\n            await insertItemToPlaylist(payload.userAccessToken, payload.itemResourceId, payload.playlistId);\n        } catch (e) {\n            console.error(\n                `Error while inserting item (${payload.itemResourceId.videoId}) to playlist (${payload.playlistId})`\n            );\n            throw e;\n        }\n    };\n};\n\nexport const moveItemToPlaylistAction = (payload: {\n    userAccessToken: string;\n    itemResourceId: ResourceIdInterface;\n    itemId: string;\n    playlistId: string;\n}) => {\n    return async (dispatch: AppDispatch) => {\n        try {\n            await Promise.all([\n                insertItemToPlaylist(payload.userAccessToken, payload.itemResourceId, payload.playlistId),\n                deleteItemFromPlaylist(payload.userAccessToken, payload.itemId)\n            ]);\n            dispatch(removeContent({id: payload.itemId}));\n        } catch (e) {\n            console.error(`Error while moving item (${payload.itemId}) to playlist (${payload.playlistId})`);\n            throw e;\n        }\n    };\n};\n","import {Dialog, DialogTitle, DialogActions, Button, DialogContent} from '@mui/material';\r\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\r\nimport {useTranslation} from 'react-i18next';\r\n\r\nfunction ConfirmActionDialog({\r\n    visible = false,\r\n    title,\r\n    content,\r\n    confirmButtonLabel,\r\n    onConfirm,\r\n    onCancel\r\n}: {\r\n    visible: boolean;\r\n    title?: string;\r\n    content: string;\r\n    confirmButtonLabel?: string;\r\n    onConfirm: Function;\r\n    onCancel: Function;\r\n}) {\r\n    const {t} = useTranslation();\r\n\r\n    return (\r\n        <Dialog open={visible} fullWidth maxWidth=\"sm\">\r\n            <DialogTitle id=\"alert-dialog-title\">{title ? title : t('confirmation')}</DialogTitle>\r\n            <DialogContent>{content}</DialogContent>\r\n            <DialogActions>\r\n                <Button onClick={() => onCancel()}>{t('close')}</Button>\r\n                <Button variant=\"contained\" color=\"error\" startIcon={<SaveOutlinedIcon />} onClick={() => onConfirm()}>\r\n                    {confirmButtonLabel ? confirmButtonLabel : t('confirm')}\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n}\r\n\r\nexport default ConfirmActionDialog;\r\n","import {\n    List,\n    ListItem,\n    ListItemAvatar,\n    ListItemText,\n    Avatar,\n    Divider,\n    Typography,\n    IconButton,\n    Menu,\n    MenuItem,\n    Tooltip,\n    Snackbar,\n    Alert,\n    AlertColor\n} from '@mui/material';\n\nimport DeleteOutlineOutlinedIcon from '@mui/icons-material/DeleteOutlineOutlined';\nimport MoreVertOutlinedIcon from '@mui/icons-material/MoreVertOutlined';\nimport SaveOutlinedIcon from '@mui/icons-material/SaveOutlined';\nimport SendAndArchiveOutlinedIcon from '@mui/icons-material/SendAndArchiveOutlined';\n\nimport './styles.css';\nimport {useState} from 'react';\nimport {IResourceId} from '../../../utils/api/interface';\nimport {IPlaylistItemsContent} from '../../../utils/context/interface';\nimport {useAppDispatch, useAppSelector} from '../../../app/hooks';\nimport {selectUserAccessToken} from '../../../utils/arms/user/selectors';\nimport {\n    ContentsInterface,\n    defaultItemResourceId,\n    ResourceIdInterface\n} from '../../../utils/arms/playlistContents/state';\nimport SelectPlaylistDialog from '../../../containers/Dialog/SelectPlaylistDialog';\nimport {\n    deleteItemFromPlaylistAction,\n    insertItemToPlaylistAction,\n    moveItemToPlaylistAction\n} from '../../../utils/arms/playlistContents/middleware';\nimport {useTranslation} from 'react-i18next';\nimport ConfirmActionDialog from '../../../components/Dialog/ConfirmActionDialog';\n\nenum ItemActionEnum {\n    MOVE_TO = 'move_to',\n    SAVE_IN = 'save_in'\n}\n\nfunction Content({playlistId, playlistsListItems}: {playlistId: string; playlistsListItems: ContentsInterface}) {\n    const dispatch = useAppDispatch();\n\n    const {t} = useTranslation();\n    const userAccessToken = useAppSelector(selectUserAccessToken);\n    const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);\n    const [anchorCurrentIemResourceId, setAnchorCurrentIemResourceId] =\n        useState<ResourceIdInterface>(defaultItemResourceId);\n    const [anchorCurrentItemId, setAnchorCurrentItemId] = useState('');\n\n    const [confirmDialogVisible, setConfirmDialogVisible] = useState(false);\n    const [confirmDialogContent, setConfirmDialogContent] = useState('');\n    const [confirmDialogOnConfirm, setConfirmDialogOnConfirm] = useState<Function>(() => {});\n    const [confirmDialogOnCancel, setConfirmDialogOnCancel] = useState<Function>(() => {});\n\n    const [selectPlaylistDialogVisible, setSelectPlaylistDialogVisible] = useState(false);\n    const [selectPlaylistDialogMode, setSelectPlaylistDialogMode] = useState<ItemActionEnum | ''>('');\n    const [selectPlaylistDialogTitle, setSelectPlaylistDialogTitle] = useState('');\n    const [selectPlaylistDialogConfirm, setSelectPlaylistDialogConfirm] = useState('');\n    const [selectPlaylistDialogConfirmIcon, setSelectPlaylistDialogConfirmIcon] = useState(<></>);\n\n    const [snackbarVisible, setSnackbarVisible] = useState(false);\n    const [snackbarMessage, setSnackbarMessage] = useState('');\n    const [snackbarSeverity, setSnackbarSeverity] = useState<AlertColor>('info');\n\n    const resetConfirmDialogStates = () => {\n        setConfirmDialogVisible(false);\n        setConfirmDialogContent('');\n        setConfirmDialogOnConfirm(() => {});\n        setConfirmDialogOnCancel(() => {});\n    };\n\n    const handleDeleteClick = (itemId: string) => {\n        setConfirmDialogContent(t('confirm delete video from playlist'));\n        setConfirmDialogOnCancel(() => resetConfirmDialogStates);\n        setConfirmDialogOnConfirm(() => () => executeDeleteClick(itemId));\n        setConfirmDialogVisible(true);\n    };\n\n    const executeDeleteClick = async (itemId: string) => {\n        try {\n            await dispatch(deleteItemFromPlaylistAction({userAccessToken: userAccessToken, itemId: itemId}));\n            resetConfirmDialogStates();\n\n            setSnackbarMessage(t('video delete success'));\n            setSnackbarSeverity('success');\n            setSnackbarVisible(true);\n        } catch {\n            setSnackbarMessage(t('video delete error'));\n            setSnackbarSeverity('error');\n            setSnackbarVisible(true);\n        }\n    };\n\n    const resetSelectPlaylistDialogStates = () => {\n        setSelectPlaylistDialogVisible(false);\n        setSelectPlaylistDialogMode('');\n        setSelectPlaylistDialogTitle('');\n        setSelectPlaylistDialogConfirm('');\n        setSelectPlaylistDialogConfirmIcon(<></>);\n\n        handleCloseMoreMenu();\n    };\n\n    const handleMoreMenu = (event: React.MouseEvent<HTMLButtonElement>, resourceId: IResourceId, itemId: string) => {\n        setAnchorEl(event.currentTarget);\n        setAnchorCurrentIemResourceId(resourceId);\n        setAnchorCurrentItemId(itemId);\n    };\n\n    const handleCloseMoreMenu = () => {\n        setAnchorEl(null);\n        setAnchorCurrentIemResourceId(defaultItemResourceId);\n        setAnchorCurrentItemId('');\n    };\n\n    const handleSaveSelectDialog = async (selectedPlaylistId: string) => {\n        try {\n            if (selectPlaylistDialogMode === ItemActionEnum.SAVE_IN) {\n                await dispatch(\n                    insertItemToPlaylistAction({\n                        userAccessToken: userAccessToken,\n                        itemResourceId: anchorCurrentIemResourceId,\n                        playlistId: selectedPlaylistId\n                    })\n                );\n\n                setSnackbarMessage(t('video add success'));\n                setSnackbarSeverity('success');\n                setSnackbarVisible(true);\n                resetSelectPlaylistDialogStates();\n            } else if (selectPlaylistDialogMode === ItemActionEnum.MOVE_TO) {\n                await dispatch(\n                    moveItemToPlaylistAction({\n                        userAccessToken: userAccessToken,\n                        itemResourceId: anchorCurrentIemResourceId,\n                        itemId: anchorCurrentItemId,\n                        playlistId: selectedPlaylistId\n                    })\n                );\n\n                setSnackbarMessage(t('video move success'));\n                setSnackbarSeverity('success');\n                setSnackbarVisible(true);\n                resetSelectPlaylistDialogStates();\n            }\n        } catch {\n            setSnackbarMessage(t('error occure while saving'));\n            setSnackbarSeverity('error');\n            setSnackbarVisible(true);\n            resetSelectPlaylistDialogStates();\n        }\n\n        handleCloseMoreMenu();\n    };\n\n    const handleOpenSelectPlaylistDialog = (mode: ItemActionEnum) => {\n        setSelectPlaylistDialogMode(mode);\n\n        switch (mode) {\n            case ItemActionEnum.SAVE_IN:\n                setSelectPlaylistDialogTitle(t('save in') + ' :');\n                setSelectPlaylistDialogConfirm(t('save'));\n                setSelectPlaylistDialogConfirmIcon(<SaveOutlinedIcon />);\n                break;\n            case ItemActionEnum.MOVE_TO:\n                setSelectPlaylistDialogTitle(t('move to') + ' :');\n                setSelectPlaylistDialogConfirm(t('move'));\n                setSelectPlaylistDialogConfirmIcon(<SendAndArchiveOutlinedIcon />);\n                break;\n        }\n\n        setSelectPlaylistDialogVisible(true);\n    };\n\n    const getThumbnailsFromItem = (Item: IPlaylistItemsContent): string => {\n        let pathOrUrlOfThumbnails = '';\n\n        if (Item.snippet.thumbnails !== undefined) {\n            if (Item.snippet.thumbnails.high !== undefined) {\n                pathOrUrlOfThumbnails = Item.snippet.thumbnails.high.url;\n            }\n        }\n\n        return pathOrUrlOfThumbnails;\n    };\n\n    return (\n        <>\n            <List className=\"list-container\">\n                {Object.values(playlistsListItems.items).map((Item, index) => (\n                    <div className=\"item\" key={Item.id}>\n                        <ListItem>\n                            <ListItemAvatar>\n                                <Avatar\n                                    sx={{width: 120, height: 85}}\n                                    alt={Item.snippet.title}\n                                    src={getThumbnailsFromItem(Item)}\n                                    variant=\"square\"\n                                />\n                            </ListItemAvatar>\n                            <ListItemText\n                                className=\"list-item-text list-item-text-margin\"\n                                primary={\n                                    <Typography className=\"primary\" variant=\"h6\" color=\"text.primary\">\n                                        {Item.snippet.title}\n                                    </Typography>\n                                }\n                                secondary={\n                                    <Typography className=\"secondary\" variant=\"body2\" color=\"text.secondary\">\n                                        {Item.snippet.videoOwnerChannelTitle}\n                                    </Typography>\n                                }\n                            />\n                            <Tooltip title={t('delete')}>\n                                <IconButton\n                                    size=\"large\"\n                                    aria-haspopup=\"true\"\n                                    onClick={() => handleDeleteClick(Item.id)}\n                                >\n                                    <DeleteOutlineOutlinedIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title={t('other actions')}>\n                                <IconButton\n                                    size=\"large\"\n                                    aria-haspopup=\"true\"\n                                    aria-controls=\"menu-more\"\n                                    onClick={event => handleMoreMenu(event, Item.snippet.resourceId, Item.id)}\n                                >\n                                    <MoreVertOutlinedIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </ListItem>\n\n                        {index + 1 < playlistsListItems.items.length && (\n                            <Divider className=\"divider\" variant=\"middle\" component=\"li\" />\n                        )}\n                    </div>\n                ))}\n            </List>\n            <Menu\n                id=\"menu-more\"\n                anchorEl={anchorEl}\n                anchorOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                keepMounted\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'right'\n                }}\n                disableScrollLock={false}\n                open={Boolean(anchorEl)}\n                onClose={handleCloseMoreMenu}\n            >\n                <MenuItem\n                    key=\"saveInAnOtherPlaylist\"\n                    onClick={() => handleOpenSelectPlaylistDialog(ItemActionEnum.SAVE_IN)}\n                >\n                    <SaveOutlinedIcon />\n                    <span className=\"header-menuitem-margin-left\">{t('save in an other playlist')}</span>\n                </MenuItem>\n                <Divider />\n                <MenuItem\n                    key=\"deleteAndSaveInAnOtherPlaylist\"\n                    onClick={() => handleOpenSelectPlaylistDialog(ItemActionEnum.MOVE_TO)}\n                >\n                    <SendAndArchiveOutlinedIcon />\n                    <span className=\"header-menuitem-margin-left\">{t('move to an other playlist')}</span>\n                </MenuItem>\n            </Menu>\n            <ConfirmActionDialog\n                visible={confirmDialogVisible}\n                content={confirmDialogContent}\n                onCancel={confirmDialogOnCancel}\n                onConfirm={confirmDialogOnConfirm}\n            />\n            <SelectPlaylistDialog\n                visible={selectPlaylistDialogVisible}\n                currentPlaylistId={playlistId}\n                userAccessToken={userAccessToken}\n                hideCurrentPlaylist={true}\n                title={selectPlaylistDialogTitle}\n                confirmText={selectPlaylistDialogConfirm}\n                confirmIcon={selectPlaylistDialogConfirmIcon}\n                onConfirm={handleSaveSelectDialog}\n                onCancel={resetSelectPlaylistDialogStates}\n            />\n            <Snackbar\n                open={snackbarVisible}\n                anchorOrigin={{horizontal: 'right', vertical: 'bottom'}}\n                autoHideDuration={4000}\n                onClose={() => setSnackbarVisible(false)}\n            >\n                <Alert severity={snackbarSeverity}>{snackbarMessage}</Alert>\n            </Snackbar>\n        </>\n    );\n}\n\nexport default Content;\n","import {List, ListItem, Divider} from '@mui/material';\r\nimport './styles.css';\r\nimport '../styles.css';\r\n\r\nfunction displaySkeletonContent(isFirstLoad: boolean) {\r\n    return (\r\n        <div>\r\n            <List className=\"list-container skeleton\">\r\n                {!isFirstLoad && <Divider className=\"divider\" variant=\"middle\" component=\"li\" />}\r\n\r\n                {[...Array(5)].map((_, i) => (\r\n                    <div key={i}>\r\n                        <ListItem>\r\n                            <div className=\"skeleton skeleton-content-preview\"></div>\r\n                            <div className=\"skeleton-content-item-container\">\r\n                                <div className=\"skeleton skeleton-content-item-primary\"></div>\r\n                                <div className=\"skeleton skeleton-content-item-secondary\"></div>\r\n                            </div>\r\n                            <div className=\"skeleton skeleton-content-item-action\"></div>\r\n                        </ListItem>\r\n\r\n                        {i + 1 < 5 && <Divider className=\"divider\" variant=\"middle\" component=\"li\" />}\r\n                    </div>\r\n                ))}\r\n            </List>\r\n        </div>\r\n    );\r\n}\r\n\r\nfunction ContentSkeleton({isFirstLoad}: {isFirstLoad: boolean}) {\r\n    return <div>{displaySkeletonContent(isFirstLoad)}</div>;\r\n}\r\n\r\nexport default ContentSkeleton;\r\n","import {useState} from 'react';\nimport {useParams} from 'react-router-dom';\nimport {AppBar, Toolbar, IconButton, Button, Typography, Box, Tooltip} from '@mui/material';\nimport {useHistory} from 'react-router-dom';\n\nimport ChevronLeftOutlinedIcon from '@mui/icons-material/ChevronLeftOutlined';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\n\nimport './styles.css';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {selectUserAccessToken} from '../../utils/arms/user/selectors';\nimport {useFetchPlaylistContents} from './hook';\nimport {\n    selectPlaylistContentsItems,\n    selectPlaylistContentsNextPageToken\n} from '../../utils/arms/playlistContents/selectors';\nimport {removePlaylistContents} from '../../utils/arms/playlistContents/reducer';\nimport {selectPlaylistItem} from '../../utils/arms/playlists/selectors';\nimport EditPlaylistDialog from '../../containers/Dialog/EditPlaylistDialog';\nimport EmptyIllustration from '../../components/Assets/EmptyIllustration';\nimport {useTranslation} from 'react-i18next';\nimport Content from '../../containers/PlaylistContents/Content';\nimport ContentSkeleton from '../../containers/PlaylistContents/Content/Skeleton';\n\nfunction PlaylistContent() {\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    let history = useHistory();\n    const {playlistId} = useParams<{playlistId: string}>();\n\n    const playlistItem = useAppSelector(state => selectPlaylistItem(state, playlistId));\n    const userAccessToken = useAppSelector(selectUserAccessToken);\n    const nextPageTokenInStore = useAppSelector(selectPlaylistContentsNextPageToken);\n    const playlistContentsItems = useAppSelector(selectPlaylistContentsItems);\n\n    const [nextPageToken, setNextPageToken] = useState<string | undefined>(undefined);\n    const [isEditPlaylistDialogOpen, setIsPlaylistDialogOpen] = useState(false);\n\n    const {arePlaylistContentsLoading, arePlaylistContentsLoaded} = useFetchPlaylistContents(\n        userAccessToken,\n        playlistId,\n        nextPageToken\n    );\n\n    const handleHomeClick = () => {\n        dispatch(removePlaylistContents({}));\n        history.push('/playlists');\n    };\n\n    const loadMorePlaylisContents = () => {\n        setNextPageToken(nextPageTokenInStore);\n    };\n\n    const displayPlaylistContent = () => {\n        let content, skeleton;\n\n        if (playlistContentsItems.length > 0) {\n            content = <Content playlistId={playlistId} playlistsListItems={{items: playlistContentsItems}} />;\n        }\n\n        if (arePlaylistContentsLoaded && playlistContentsItems.length === 0) {\n            content = <EmptyIllustration title={t('no video in your playlist')} />;\n        }\n\n        if (arePlaylistContentsLoading) {\n            skeleton = <ContentSkeleton isFirstLoad={playlistContentsItems.length === 0} />;\n        }\n\n        return (\n            <div>\n                {content}\n                {skeleton}\n            </div>\n        );\n    };\n\n    return (\n        <div className=\"playlist-content\">\n            <AppBar position=\"static\">\n                <Box sx={{flexGrow: 1}}>\n                    <Toolbar>\n                        <Tooltip title={t('back')}>\n                            <IconButton\n                                size=\"large\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={() => handleHomeClick()}\n                            >\n                                <ChevronLeftOutlinedIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Typography variant=\"body1\" color=\"text.primary\">\n                            {playlistItem.snippet.localized.title}\n                        </Typography>\n                        <Box sx={{flexGrow: 1}} />\n                        <Tooltip title={t('edit')}>\n                            <IconButton\n                                className=\"button-filter\"\n                                size=\"large\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={() => {\n                                    setIsPlaylistDialogOpen(true);\n                                }}\n                                color=\"inherit\"\n                            >\n                                <EditOutlinedIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Toolbar>\n                </Box>\n            </AppBar>\n\n            {displayPlaylistContent()}\n\n            {playlistContentsItems.length > 0 && nextPageTokenInStore !== undefined && (\n                <div className=\"see-more-container\">\n                    <Button\n                        variant=\"outlined\"\n                        onClick={() => {\n                            loadMorePlaylisContents();\n                        }}\n                    >\n                        {t('see more')} ...\n                    </Button>\n                </div>\n            )}\n\n            <EditPlaylistDialog\n                visible={isEditPlaylistDialogOpen}\n                playlistId={playlistId}\n                onCancel={() => setIsPlaylistDialogOpen(false)}\n            />\n        </div>\n    );\n}\n\nexport default PlaylistContent;\n","import {Card, CardActions, CardContent, CardMedia, Grid, Tooltip, Typography} from '@mui/material';\n\nimport IconButton from '@mui/material/IconButton';\nimport LaunchOutlinedIcon from '@mui/icons-material/LaunchOutlined';\n\nimport './styles.css';\nimport EditOutlinedIcon from '@mui/icons-material/EditOutlined';\nimport {ItemsInterface} from '../../../utils/arms/playlists/state';\nimport {useTranslation} from 'react-i18next';\n\nfunction MosaicMode({\n    playlistsListData,\n    onClickOnEditPlaylist,\n    onClickOnOpenPlaylist\n}: {\n    playlistsListData: ItemsInterface;\n    onClickOnEditPlaylist: Function;\n    onClickOnOpenPlaylist: Function;\n}) {\n    const {t} = useTranslation();\n\n    return (\n        <Grid\n            container\n            direction=\"row\"\n            rowSpacing={4}\n            columnSpacing={4}\n            alignItems=\"flex-start\"\n            className=\"grid-container\"\n        >\n            {playlistsListData.items?.map((PlaylistData, index) => (\n                <Grid key={PlaylistData.id} item xs={12} sm={6} md={4} lg={3}>\n                    <Card className=\"card\">\n                        <CardMedia\n                            className=\"open-playlist-pointer\"\n                            component=\"img\"\n                            height=\"194\"\n                            image={PlaylistData.snippet.thumbnails.high.url}\n                            alt={PlaylistData.snippet.localized.title}\n                            onClick={() => onClickOnOpenPlaylist(PlaylistData.id)}\n                        />\n                        <CardContent>\n                            <Typography\n                                gutterBottom\n                                variant=\"h5\"\n                                component=\"div\"\n                                className=\"card-title open-playlist-pointer\"\n                                onClick={() => onClickOnOpenPlaylist(PlaylistData.id)}\n                            >\n                                {PlaylistData.snippet.localized.title}\n                            </Typography>\n                            <Typography variant=\"body2\" color=\"text.secondary\" className=\"card-description\">\n                                {PlaylistData.snippet.localized.description === ''\n                                    ? t('no description')\n                                    : PlaylistData.snippet.localized.description}\n                            </Typography>\n                        </CardContent>\n                        <CardActions className=\"card-actions\">\n                            <Tooltip title={t('edit')}>\n                                <IconButton onClick={() => onClickOnEditPlaylist(PlaylistData.id)}>\n                                    <EditOutlinedIcon />\n                                </IconButton>\n                            </Tooltip>\n                            <Tooltip title={t('open playlist')}>\n                                <IconButton onClick={() => onClickOnOpenPlaylist(PlaylistData.id)}>\n                                    <LaunchOutlinedIcon />\n                                </IconButton>\n                            </Tooltip>\n                        </CardActions>\n                    </Card>\n                </Grid>\n            ))}\n        </Grid>\n    );\n}\n\nexport default MosaicMode;\n","import {Grid, Card} from '@mui/material';\r\nimport './styles.css';\r\nimport '../styles.css';\r\n\r\nfunction displaySkeletonContent() {\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            rowSpacing={4}\r\n            columnSpacing={4}\r\n            alignItems=\"flex-start\"\r\n            className=\"grid-container skeleton\"\r\n        >\r\n            {[...Array(4)].map((_, index) => (\r\n                <Grid key={index} item xs={12} sm={6} md={4} lg={3}>\r\n                    <Card className=\"card\">\r\n                        <div className=\"skeleton mosaic-mode-skeleton-preview\"></div>\r\n                        <div className=\"skeleton mosaic-mode-skeleton-title\"></div>\r\n                        <div className=\"skeleton mosaic-mode-skeleton-description\"></div>\r\n                        <div className=\"mosaic-mode-skeleton-actions-container\">\r\n                            <div className=\"skeleton mosaic-mode-skeleton-actions\"></div>\r\n                            <div className=\"skeleton mosaic-mode-skeleton-actions\"></div>\r\n                        </div>\r\n                    </Card>\r\n                </Grid>\r\n            ))}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nfunction MosaicModeSkeleton() {\r\n    return <div>{displaySkeletonContent()}</div>;\r\n}\r\n\r\nexport default MosaicModeSkeleton;\r\n","import {useState} from 'react';\n\nimport {AppBar, Toolbar, IconButton, Button, Box, Typography, Tooltip, CircularProgress} from '@mui/material';\n\nimport './styles.css';\n\nimport ViewModuleOutlinedIcon from '@mui/icons-material/ViewModuleOutlined';\nimport ListOutlinedIcon from '@mui/icons-material/ListOutlined';\nimport SortOutlinedIcon from '@mui/icons-material/SortOutlined';\nimport {useHistory} from 'react-router-dom';\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\nimport {selectUserAccessToken, selectUserPlaylistDisplayMode} from '../../utils/arms/user/selectors';\nimport {useFetchPlaylists} from './hook';\nimport {\n    selectPlaylistsCurrentPageToken,\n    selectPlaylistsItems,\n    selectPlaylistsNextPageToken\n} from '../../utils/arms/playlists/selectors';\nimport EditPlaylistDialog from '../../containers/Dialog/EditPlaylistDialog';\nimport EmptyIllustration from '../../components/Assets/EmptyIllustration';\nimport {PlaylistDisplayModeEnum} from '../../utils/arms/user/state';\nimport {setUserPlaylistDisplayMode} from '../../utils/arms/user/reducer';\nimport {useTranslation} from 'react-i18next';\nimport MosaicMode from '../../components/Playlists/MosaicMode';\nimport ListMode from '../../components/Playlists/ListMode';\nimport MosaicModeSkeleton from '../../components/Playlists/MosaicMode/Skeleton';\n\nfunction PlaylistList() {\n    let history = useHistory();\n\n    const {t} = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const userAccessToken = useAppSelector(selectUserAccessToken);\n    const nextPageTokenInStore = useAppSelector(selectPlaylistsNextPageToken);\n    const currentPageToken = useAppSelector(selectPlaylistsCurrentPageToken);\n    const playlistsItems = useAppSelector(selectPlaylistsItems);\n    const userPlaylistDisplayMode = useAppSelector(selectUserPlaylistDisplayMode);\n\n    const [isEditPlaylistDialogOpen, setIsPlaylistDialogOpen] = useState(false);\n    const [playlistIdToEdit, setPlaylistIdToEdit] = useState<string | undefined>();\n    const [nextPageToken, setNextPageToken] = useState<string | undefined>(currentPageToken);\n\n    const {arePlaylistsLoading} = useFetchPlaylists(userAccessToken, nextPageToken);\n\n    const handlePlaylistDisplayMode = (mode: PlaylistDisplayModeEnum) => {\n        if (mode !== userPlaylistDisplayMode) {\n            dispatch(setUserPlaylistDisplayMode({playlistDisplayMode: mode}));\n        }\n    };\n\n    const openPlaylist = (playlistId: string) => {\n        history.push('/playlist/' + playlistId);\n    };\n\n    const openEditPlaylistDialog = (playlistId: string) => {\n        setPlaylistIdToEdit(playlistId);\n        setIsPlaylistDialogOpen(true);\n    };\n\n    const closeEditPlaylistDialog = () => {\n        setIsPlaylistDialogOpen(false);\n    };\n\n    const loadMorePlaylistList = () => {\n        setNextPageToken(nextPageTokenInStore);\n    };\n\n    const displayPlaylists = () => {\n        if (playlistsItems.length > 0) {\n            if (userPlaylistDisplayMode === PlaylistDisplayModeEnum.MOSAIC) {\n                return (\n                    <MosaicMode\n                        playlistsListData={{items: playlistsItems}}\n                        onClickOnEditPlaylist={openEditPlaylistDialog}\n                        onClickOnOpenPlaylist={openPlaylist}\n                    />\n                );\n            } else if (userPlaylistDisplayMode === PlaylistDisplayModeEnum.LIST) {\n                return (\n                    <ListMode\n                        playlistsListData={{items: playlistsItems}}\n                        onClickOnEditPlaylist={openEditPlaylistDialog}\n                        onClickOnOpenPlaylist={openPlaylist}\n                    />\n                );\n            }\n        } else {\n            if (arePlaylistsLoading) {\n                return <MosaicModeSkeleton />; // TODO: revoir l'affichage du skeleton pour matcher ce qui est fait dans playlistContents\n            } else {\n                return <EmptyIllustration title={t('no playlist found')} />;\n            }\n        }\n    };\n\n    return (\n        <div className=\"playlist-list\">\n            <AppBar position=\"static\">\n                <Box sx={{flexGrow: 1}}>\n                    <Toolbar>\n                        <Typography variant=\"body1\" color=\"text.primary\">\n                            {t('sort')}\n                        </Typography>\n                        <IconButton\n                            className=\"button-filter\"\n                            size=\"large\"\n                            aria-controls=\"menu-appbar\"\n                            aria-haspopup=\"true\"\n                            onClick={() => console.log('test')}\n                            color=\"inherit\"\n                        >\n                            <SortOutlinedIcon />\n                        </IconButton>\n                        <Box sx={{flexGrow: 1}} />\n                        <Typography variant=\"body1\" color=\"text.primary\">\n                            {t('display')}\n                        </Typography>\n                        <Tooltip title={t('mosaic')}>\n                            <IconButton\n                                size=\"large\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={() => handlePlaylistDisplayMode(PlaylistDisplayModeEnum.MOSAIC)}\n                                color={\n                                    userPlaylistDisplayMode === PlaylistDisplayModeEnum.MOSAIC ? 'secondary' : 'inherit'\n                                }\n                            >\n                                <ViewModuleOutlinedIcon />\n                            </IconButton>\n                        </Tooltip>\n                        <Tooltip title={t('list')}>\n                            <IconButton\n                                size=\"large\"\n                                aria-controls=\"menu-appbar\"\n                                aria-haspopup=\"true\"\n                                onClick={() => handlePlaylistDisplayMode(PlaylistDisplayModeEnum.LIST)}\n                                color={\n                                    userPlaylistDisplayMode === PlaylistDisplayModeEnum.LIST ? 'secondary' : 'inherit'\n                                }\n                            >\n                                <ListOutlinedIcon />\n                            </IconButton>\n                        </Tooltip>\n                    </Toolbar>\n                </Box>\n            </AppBar>\n\n            {displayPlaylists()}\n\n            {playlistsItems.length > 0 && nextPageTokenInStore !== undefined && (\n                <div className=\"see-more-container\">\n                    <Button\n                        variant=\"outlined\"\n                        onClick={() => {\n                            loadMorePlaylistList();\n                        }}\n                    >\n                        {arePlaylistsLoading && <CircularProgress size={15} />}\n                        {t('see more')} ...\n                    </Button>\n                </div>\n            )}\n\n            {playlistIdToEdit !== undefined && (\n                <EditPlaylistDialog\n                    visible={isEditPlaylistDialogOpen}\n                    playlistId={playlistIdToEdit}\n                    onCancel={closeEditPlaylistDialog}\n                />\n            )}\n        </div>\n    );\n}\n\nexport default PlaylistList;\n","import {useEffect, useState} from 'react';\r\nimport {useAppDispatch} from '../../app/hooks';\r\nimport {getYoutubePlaylists} from '../../utils/api';\r\nimport {addPlaylists} from '../../utils/arms/playlists/reducer';\r\n\r\nexport const useFetchPlaylists = (userAccessToken: string, nextPageToken: string | undefined) => {\r\n    const [arePlaylistsLoading, setArePlaylistsLoading] = useState(false);\r\n    const [arePlaylistsLoaded, setArePlaylistsLoaded] = useState(false);\r\n    const dispatch = useAppDispatch();\r\n\r\n    useEffect(() => {\r\n        setArePlaylistsLoaded(false);\r\n        setArePlaylistsLoading(true);\r\n\r\n        getYoutubePlaylists(userAccessToken, nextPageToken).then(data => {\r\n            dispatch(addPlaylists({playlistsData: data}));\r\n\r\n            setArePlaylistsLoaded(true);\r\n            setArePlaylistsLoading(false);\r\n        });\r\n    }, [dispatch, userAccessToken, nextPageToken]);\r\n\r\n    return {arePlaylistsLoading, arePlaylistsLoaded};\r\n};\r\n","import {\r\n    AppBar,\r\n    Box,\r\n    Card,\r\n    CardContent,\r\n    Grid,\r\n    IconButton,\r\n    ListItemText,\r\n    MenuItem,\r\n    TextField,\r\n    Toolbar,\r\n    Tooltip,\r\n    Typography\r\n} from '@mui/material';\r\nimport './styles.css';\r\nimport ChevronLeftOutlinedIcon from '@mui/icons-material/ChevronLeftOutlined';\r\nimport AvatarCustom, {AvatarSizeEnum} from '../../components/AvatarCustom';\r\n\r\nimport {useHistory} from 'react-router';\r\nimport {useAppDispatch, useAppSelector} from '../../app/hooks';\r\nimport {setUserLanguage} from '../../utils/arms/user/reducer';\r\nimport {selectUserFullName, selectUserAvatar, selectUserLanguage} from '../../utils/arms/user/selectors';\r\nimport {useTranslation} from 'react-i18next';\r\nimport {AvailableLangague} from '../../utils/arms/user/state';\r\n\r\nfunction Profile() {\r\n    let history = useHistory();\r\n\r\n    const {t, i18n} = useTranslation();\r\n    const dispatch = useAppDispatch();\r\n    const userFullName = useAppSelector(selectUserFullName);\r\n    const userAvatar = useAppSelector(selectUserAvatar);\r\n    const userLanguage = useAppSelector(selectUserLanguage);\r\n\r\n    const handleHomeClick = () => {\r\n        history.push('/playlists');\r\n    };\r\n\r\n    const handleLanguageChange = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        const language = event.target.value as AvailableLangague;\r\n        dispatch(setUserLanguage({language: language}));\r\n        i18n.changeLanguage(language);\r\n    };\r\n\r\n    return (\r\n        <div className=\"\">\r\n            <AppBar position=\"static\">\r\n                <Box sx={{flexGrow: 1}}>\r\n                    <Toolbar>\r\n                        <Tooltip title={t('back')}>\r\n                            <IconButton\r\n                                size=\"large\"\r\n                                aria-controls=\"menu-appbar\"\r\n                                aria-haspopup=\"true\"\r\n                                onClick={() => handleHomeClick()}\r\n                            >\r\n                                <ChevronLeftOutlinedIcon />\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Typography variant=\"body1\" color=\"text.primary\">\r\n                            {t('my profile')}\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </Box>\r\n            </AppBar>\r\n            <div className=\"profile-options-container\">\r\n                <div>\r\n                    <Grid container direction=\"column\" alignItems=\"center\" justifyContent=\"center\">\r\n                        <AvatarCustom title={userFullName} source={userAvatar} size={AvatarSizeEnum.XL} />\r\n                        <Typography variant=\"h5\" color=\"text.primary\" className=\"profile-options-title\">\r\n                            {t('welcome')} {userFullName}\r\n                        </Typography>\r\n                    </Grid>\r\n                </div>\r\n                <Card sx={{minWidth: 275}}>\r\n                    <CardContent>\r\n                        <Typography variant=\"h5\" color=\"text.primary\" className=\"profile-options-subtitle\">\r\n                            {t('my preferences')}\r\n                        </Typography>\r\n                        <TextField\r\n                            select\r\n                            id=\"select-language\"\r\n                            margin=\"normal\"\r\n                            color=\"secondary\"\r\n                            label={t('language')}\r\n                            value={userLanguage}\r\n                            onChange={handleLanguageChange}\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                        >\r\n                            <MenuItem key=\"fr\" value={AvailableLangague.FR}>\r\n                                <img\r\n                                    className=\"flag-icon\"\r\n                                    loading=\"lazy\"\r\n                                    height=\"13\"\r\n                                    width=\"20\"\r\n                                    src={`https://flagcdn.com/w20/fr.png`}\r\n                                    alt={t('french')}\r\n                                />\r\n                                <ListItemText className=\"select-item-text\" primary={t('french')}></ListItemText>\r\n                            </MenuItem>\r\n                            <MenuItem key=\"en\" value={AvailableLangague.EN}>\r\n                                <img\r\n                                    className=\"flag-icon\"\r\n                                    loading=\"lazy\"\r\n                                    height=\"13\"\r\n                                    width=\"20\"\r\n                                    src={`https://flagcdn.com/w20/gb.png`}\r\n                                    alt={t('english')}\r\n                                />\r\n                                <ListItemText className=\"select-item-text\" primary={t('english')} />\r\n                            </MenuItem>\r\n                        </TextField>\r\n                    </CardContent>\r\n                </Card>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Profile;\r\n","import {Route, Switch, useHistory} from 'react-router-dom';\n\nimport LoginScreen from '../../pages/LoginScreen/index';\nimport PlaylistContent from '../../pages/PlaylistContents/index';\nimport PlaylistList from '../../pages/Playlists/index';\n\nimport './styles.css';\nimport Profile from '../../pages/Profile';\n\nimport {useAppSelector} from '../../app/hooks';\nimport {selectIsUserLogin} from '../../utils/arms/user/selectors';\n\nfunction Body() {\n    let history = useHistory();\n\n    const isUserLogin = useAppSelector(selectIsUserLogin);\n\n    if (!isUserLogin) {\n        history.push('/');\n    }\n\n    return (\n        <div>\n            <div className=\"body-spacer\"></div>\n            <div className=\"body-container\">\n                {!isUserLogin ? (\n                    <LoginScreen />\n                ) : (\n                    <>\n                        <Switch>\n                            <Route exact path=\"/playlists\">\n                                <PlaylistList />\n                            </Route>\n                            <Route exact path=\"/profile\">\n                                <Profile />\n                            </Route>\n                            <Route exact path=\"/playlist/:playlistId\">\n                                <PlaylistContent />\n                            </Route>\n                        </Switch>\n                    </>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default Body;\n","import {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {createTheme, ThemeProvider} from '@mui/material/styles';\nimport {CssBaseline} from '@mui/material';\nimport {GoogleOAuthProvider} from '@react-oauth/google';\n\nimport './styles.css';\nimport store from '../../app/store';\nimport React from 'react';\nimport Header from '../Header';\nimport Body from '../../containers/Body';\n\nfunction App() {\n    const theme = React.useMemo(\n        () =>\n            createTheme({\n                palette: {\n                    mode: 'dark',\n                    primary: {\n                        main: '#fff'\n                    },\n                    secondary: {\n                        light: '#eb6652',\n                        main: '#eb6652',\n                        dark: '#ff4b31',\n                        contrastText: '#fff'\n                    }\n                },\n                typography: {\n                    fontFamily: 'Poppins, sans-serif'\n                }\n            }),\n        []\n    );\n\n    const clientId = process.env.REACT_APP_GOOGLE_CLIENT_ID ? process.env.REACT_APP_GOOGLE_CLIENT_ID : '';\n\n    return (\n        <GoogleOAuthProvider clientId={clientId}>\n            <ThemeProvider theme={theme}>\n                <CssBaseline />\n                <Router>\n                    <Provider store={store}>\n                        <div className=\"app-container\">\n                            <Header />\n                            <Body />\n                        </div>\n                    </Provider>\n                </Router>\n            </ThemeProvider>\n        </GoogleOAuthProvider>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './utils/translations/i18n';\nimport App from './containers/App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}